Index: views/EventCreatorView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package views;\r\n\r\n\r\nimport event.Event;\r\n\r\n\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.DatePicker;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport model.CalendarModel;\r\nimport timeBehaviour.TimeBehaviour;\r\nimport timeBehaviour.TimePoint;\r\nimport timeBehaviour.TimeRange;\r\n\r\nimport java.awt.*;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.LocalDate;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n\r\npublic class EventCreatorView {\r\n\r\n    CalendarView calendarView;\r\n\r\n//    CalendarModel calendarModel;\r\n    private Label createEventLabel = new Label(\"Create a new event!\");\r\n    private TextField nameTextField = new TextField(\"Name\");\r\n    private TextField pointsTextField = new TextField(\"Points\");\r\n    private TextField descTextField = new TextField(\"Description\");\r\n    private Button changeTimeButton = new Button(\"Choose start/end time\");\r\n    private DatePicker pointDatePicker = new DatePicker(LocalDate.now());\r\n    private TextField pointTimePicker = new TextField(\"Time (hh:mm)\");\r\n    private DatePicker startDatePicker = new DatePicker(LocalDate.now());\r\n    private TextField startTimePicker = new TextField(\"Start time (hh:mm)\");\r\n    private DatePicker endDatePicker = new DatePicker(LocalDate.now());\r\n    private TextField endTimePicker = new TextField(\"End time (hh:mm)\");\r\n    private Button saveButton = new Button(\"Save Event\");\r\n    private Label errorLabel = new Label(\"\");\r\n\r\n    private Paint colour;\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param calendarView the application's CalendarView\r\n     */\r\n    public EventCreatorView(CalendarView calendarView) {\r\n        this.calendarView = calendarView;\r\n\r\n//        this.calendarModel = this.calendarView.model;\r\n\r\n        final Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.initOwner(calendarView.stage);\r\n        VBox dialogVbox = new VBox(20);\r\n        dialogVbox.setPadding(new Insets(20, 20, 20, 20));\r\n\r\n        Font f = new Font(16);\r\n        createEventLabel.setFont(f);\r\n        nameTextField.setFont(f);\r\n        pointsTextField.setFont(f);\r\n        descTextField.setFont(f);\r\n        changeTimeButton.setFont(f);\r\n        pointTimePicker.setFont(f);\r\n        startTimePicker.setFont(f);\r\n        endTimePicker.setFont(f);\r\n        saveButton.setFont(f);\r\n\r\n        saveButton.setOnAction(e -> createEvent());\r\n\r\n        VBox vbox = new VBox(10, createEventLabel, nameTextField, pointsTextField, descTextField, changeTimeButton, pointDatePicker, pointTimePicker, saveButton, errorLabel);\r\n        dialogVbox.getChildren().add(vbox);\r\n        Scene scene = new Scene(dialogVbox, 400, 500);\r\n        dialog.setScene(scene);\r\n        dialog.show();\r\n        dialog.setAlwaysOnTop(true);\r\n\r\n        changeTimeButton.setOnAction(e -> {\r\n            if (vbox.getChildren().contains(pointDatePicker)) {\r\n                vbox.getChildren().remove(pointDatePicker);\r\n                vbox.getChildren().remove(pointTimePicker);\r\n                vbox.getChildren().remove(saveButton);\r\n                vbox.getChildren().remove(errorLabel);\r\n                pointDatePicker.setValue(LocalDate.now());\r\n                pointTimePicker.setText(\"Time (hh:mm)\");\r\n                changeTimeButton.setText(\"Choose single time\");\r\n                vbox.getChildren().add(startDatePicker);\r\n                vbox.getChildren().add(startTimePicker);\r\n                vbox.getChildren().add(endDatePicker);\r\n                vbox.getChildren().add(endTimePicker);\r\n            } else {\r\n                vbox.getChildren().remove(startDatePicker);\r\n                vbox.getChildren().remove(startTimePicker);\r\n                vbox.getChildren().remove(endDatePicker);\r\n                vbox.getChildren().remove(endTimePicker);\r\n                vbox.getChildren().remove(saveButton);\r\n                vbox.getChildren().remove(errorLabel);\r\n                startDatePicker.setValue(LocalDate.now());\r\n                startTimePicker.setText(\"Start time (hh:mm)\");\r\n                endDatePicker.setValue(LocalDate.now());\r\n                endTimePicker.setText(\"End time (hh:mm)\");\r\n                changeTimeButton.setText(\"Choose start/end time\");\r\n                vbox.getChildren().add(pointDatePicker);\r\n                vbox.getChildren().add(pointTimePicker);\r\n            }\r\n            vbox.getChildren().add(saveButton);\r\n            vbox.getChildren().add(errorLabel);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Create a new Event using the parameters given in the text fields and date pickers.\r\n     * Store this new Event in the CalendarModel's list of Events.\r\n     */\r\n    private void createEvent() throws NumberFormatException {\r\n\r\n        // Check if the Event's Name is not empty.\r\n        if (this.nameTextField.getText().trim().isEmpty() || this.nameTextField.getText().trim().isBlank()) {\r\n            this.errorLabel.setText(\"Please enter the Event Name. It can NOT be Blank!\");\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            String temp = this.nameTextField.getText().trim();\r\n            for(Event i: this.calendarView.model.getAllEvents())\r\n            {\r\n                if (temp.equals(i.getName()))\r\n                {\r\n                    this.errorLabel.setText(\"Event Name already taken!\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        String event_name = this.nameTextField.getText().trim();\r\n\r\n        // Check if the Event's Description is not empty.\r\n        if (this.descTextField.getText().trim().isEmpty() || this.descTextField.getText().trim().isBlank()) {\r\n            this.errorLabel.setText(\"Please enter the Event's Description. It can NOT be Blank!\");\r\n            return;\r\n        }\r\n        String event_description = this.descTextField.getText().trim();\r\n\r\n\r\n        String points = String.valueOf(this.pointsTextField.getText()).trim();\r\n        int event_points = 0;\r\n        // Check if the Event's associated Points are of integer type.\r\n        try {\r\n            event_points += Integer.parseInt(points);\r\n        } catch (NumberFormatException e) {\r\n            this.errorLabel.setText(\"Please enter a Integer value for the points associated with the event.\");\r\n            return;\r\n        }\r\n\r\n\r\n        //Check the type of the time and create time range or time point based on that.\r\n        if (this.endTimePicker.getText().trim().isBlank() || this.endTimePicker.getText().trim().isEmpty() || this.startTimePicker.getText().trim().equals(\"Start time (hh:mm)\") || this.endTimePicker.getText().trim().equals(\"End time (hh:mm)\")) {\r\n            // Create a new Time Point object based on the deadline of the user.\r\n\r\n            String deadline_hours = this.pointTimePicker.getText().trim();\r\n\r\n            Pattern pattern = Pattern.compile(\"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\");\r\n            Matcher matcher = pattern.matcher(deadline_hours);\r\n            if (matcher.find()) {\r\n                // match found, valid deadline HH:mm.\r\n                String yyyy_mm_dd = this.pointDatePicker.getValue().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n\r\n                // TODO: Consider the case of  the where the deadline is a past date.\r\n\r\n                String yyyy_mm_dd_HH_mm = yyyy_mm_dd + \" \" + deadline_hours;\r\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                LocalDateTime pointTime = LocalDateTime.parse(yyyy_mm_dd_HH_mm, formatter);\r\n\r\n\r\n                // Create a TimePoint object.\r\n                TimeBehaviour tp = new TimePoint(pointTime);\r\n\r\n                // Finally, create a new Event with the new TimePoint deadline time of the event.\r\n                Event e = new Event(event_name, event_description, event_points, tp);\r\n\r\n\r\n                // Add the event to the events list of CalendarView.model.events\r\n                this.calendarView.model.addEvent(e);\r\n\r\n                this.calendarView.saveModel();\r\n                //Success Message!\r\n                this.errorLabel.setText(\"Event Added to the Calendar!\");\r\n\r\n            }\r\n            else\r\n            {\r\n                // Invalid Format of HH:mm\r\n                this.errorLabel.setText(\"Please Re-enter the time of the event. Enter in HH:mm format.\");\r\n                return;\r\n            }\r\n        } else {\r\n            // Create a new Time Range object based on the start-time and end-time of the user.\r\n\r\n\r\n            String start_time = this.startTimePicker.getText().trim();\r\n            String end_time = this.endTimePicker.getText().trim();\r\n\r\n\r\n            Pattern pattern = Pattern.compile(\"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n            Matcher matcher = pattern.matcher(start_time);\r\n            Matcher matcher1 = pattern.matcher(end_time);\r\n\r\n            if (matcher1.find() && matcher.find()) {\r\n                // match found, valid deadline HH:mm.\r\n                String yyyy_mm_dd = this.startDatePicker.getValue().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n                String yyyy_mm_dd2 = this.endDatePicker.getValue().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n\r\n                // TODO: Consider the case of  the where the deadline is a past date.\r\n\r\n                String yyyy_mm_dd_HH_mm = yyyy_mm_dd + \" \" + start_time;\r\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                LocalDateTime start_time_block = LocalDateTime.parse(yyyy_mm_dd_HH_mm, formatter);\r\n\r\n                String yyyy_mm_dd_HH_mm2 = yyyy_mm_dd2 + \" \" + end_time;\r\n                DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                LocalDateTime end_time_block = LocalDateTime.parse(yyyy_mm_dd_HH_mm2, formatter2);\r\n\r\n                System.out.println(start_time_block + \" \" + end_time_block);\r\n\r\n\r\n                // Create a TimeRange object.\r\n                TimeBehaviour tr = new TimeRange(start_time_block, end_time_block);\r\n\r\n                // Finally, create a new Event with the new TimeRange start and end time of the event block.\r\n                Event e = new Event(event_name, event_description, event_points, tr);\r\n\r\n\r\n                // Add the event to the events list of CalendarView.model.events\r\n                this.calendarView.model.addEvent(e);\r\n\r\n                this.calendarView.saveModel();\r\n\r\n                //Success Message!\r\n                this.errorLabel.setText(\"Event Added to the Calendar!\");\r\n            } else {\r\n                // Invalid Format of HH:mm\r\n                this.errorLabel.setText(\"Invalid Start/End time of the event. Enter in HH:mm format.\");\r\n                return;\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/EventCreatorView.java b/views/EventCreatorView.java
--- a/views/EventCreatorView.java	(revision e720e387022c58cd8397f2300c98470cc5c02a6b)
+++ b/views/EventCreatorView.java	(date 1670290635499)
@@ -34,7 +34,6 @@
 
     CalendarView calendarView;
 
-//    CalendarModel calendarModel;
     private Label createEventLabel = new Label("Create a new event!");
     private TextField nameTextField = new TextField("Name");
     private TextField pointsTextField = new TextField("Points");
Index: views/EventEditorView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package views;\r\n\r\nimport event.Event;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.DatePicker;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport timeBehaviour.TimeBehaviour;\r\nimport timeBehaviour.TimePoint;\r\nimport timeBehaviour.TimeRange;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class EventEditorView {\r\n\r\n    private CalendarView calendarView;\r\n    private Event event;\r\n\r\n    private Label editEventLabel = new Label(\"\");\r\n\r\n//    private Button completeButton = new Button(\"Complete!\");\r\n    private TextField nameTextField = new TextField(\"\");\r\n    private TextField pointsTextField = new TextField(\"\");\r\n    private TextField descTextField = new TextField(\"\");\r\n    private Button changeTimeButton = new Button(\"Choose start/end time\");\r\n    private DatePicker pointDatePicker = new DatePicker(LocalDate.now());\r\n    private TextField pointTimePicker = new TextField(\"Time (hh:mm)\");\r\n    private DatePicker startDatePicker = new DatePicker(LocalDate.now());\r\n    private TextField startTimePicker = new TextField(\"Start time (hh:mm)\");\r\n    private DatePicker endDatePicker = new DatePicker(LocalDate.now());\r\n    private TextField endTimePicker = new TextField(\"End time (hh:mm)\");\r\n    private Button saveButton = new Button(\"Save Changes\");\r\n    private Label errorLabel = new Label(\"\");\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param calendarView the application's CalendarView\r\n     */\r\n    public EventEditorView(CalendarView calendarView, Event event) {\r\n        this.calendarView = calendarView;\r\n        this.event = event;\r\n\r\n        final Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.initOwner(calendarView.stage);\r\n        VBox dialogVbox = new VBox(20);\r\n        dialogVbox.setPadding(new Insets(20, 20, 20, 20));\r\n\r\n        Font f = new Font(16);\r\n        editEventLabel.setFont(f);\r\n        nameTextField.setFont(f);\r\n        pointsTextField.setFont(f);\r\n        descTextField.setFont(f);\r\n        changeTimeButton.setFont(f);\r\n        pointTimePicker.setFont(f);\r\n        startTimePicker.setFont(f);\r\n        endTimePicker.setFont(f);\r\n        saveButton.setFont(f);\r\n        errorLabel.setFont(f);\r\n\r\n        VBox vbox = new VBox(10, editEventLabel, nameTextField, pointsTextField, descTextField, changeTimeButton, pointDatePicker, pointTimePicker, saveButton, errorLabel);\r\n        dialogVbox.getChildren().add(vbox);\r\n        Scene scene = new Scene(dialogVbox, 400, 500);\r\n        dialog.setScene(scene);\r\n        dialog.show();\r\n        dialog.setAlwaysOnTop(true);\r\n\r\n        saveButton.setOnAction(e -> editEvent());\r\n\r\n        changeTimeButton.setOnAction(e -> changeTime(vbox));\r\n\r\n        editEventLabel.setText(\"Edit Event: \" + event.getName());\r\n        nameTextField.setText(event.getName());\r\n        pointsTextField.setText(String.valueOf(event.getPointValue()));\r\n        descTextField.setText(event.getDescription());\r\n\r\n\r\n        //If event has a time point:\r\n        if(event.getTimeBehaviour() instanceof TimePoint)\r\n        {\r\n            TimePoint tp = (TimePoint) event.getTimeBehaviour();\r\n\r\n            //set values of pointDatePicker and pointTimePicker to event's time\r\n            this.pointDatePicker.setValue(tp.getTime().toLocalDate());\r\n            this.pointTimePicker.setText(tp.getTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")).substring(11,16));\r\n        }\r\n\r\n\r\n        //If event has a time range:\r\n        else {\r\n            changeTime(vbox);\r\n\r\n            //set values of startDatePicker, startTimePicker, endDatePicker and endTimePicker\r\n            TimeRange tr = (TimeRange) event.getTimeBehaviour();\r\n\r\n            this.startDatePicker.setValue(tr.getStartTime().toLocalDate());\r\n            this.endDatePicker.setValue(tr.getEndTime().toLocalDate());\r\n\r\n            this.startTimePicker.setText(tr.getStartTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")).substring(11,16));\r\n            this.endTimePicker.setText(tr.getEndTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")).substring(11,16));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Edit the details of the event and save accordingly.\r\n     */\r\n    private void editEvent() {\r\n\r\n        // Check if the Event's Name is not empty.\r\n        if (this.nameTextField.getText().trim().isEmpty() || this.nameTextField.getText().trim().isBlank()) {\r\n            this.errorLabel.setText(\"Please enter the Event Name. It can NOT be Blank!\");\r\n            return;\r\n        }\r\n        // Check if the event name is already in the events list.\r\n        else\r\n        {\r\n            String temp = this.nameTextField.getText().trim();\r\n            for(Event i: this.calendarView.model.getAllEvents())\r\n            {\r\n                if (temp.equals(i.getName()))\r\n                {\r\n                    this.errorLabel.setText(\"Event Name already taken!\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this.event.setName(this.nameTextField.getText().trim());\r\n\r\n\r\n        // Check if the Event's Description is not empty.\r\n        if (this.descTextField.getText().trim().isEmpty() || this.descTextField.getText().trim().isBlank()) {\r\n            this.errorLabel.setText(\"Please enter the Event's Description. It can NOT be Blank!\");\r\n            return;\r\n        }\r\n       this.event.setDescription(this.descTextField.getText().trim());\r\n\r\n\r\n        String points = String.valueOf(this.pointsTextField.getText()).trim();\r\n        int event_points = 0;\r\n        // Check if the Event's associated Points are of integer type.\r\n        try {\r\n            event_points += Integer.parseInt(points);\r\n        } catch (NumberFormatException e) {\r\n            this.errorLabel.setText(\"Please enter a Integer value for the points associated with the event.\");\r\n            return;\r\n        }\r\n        this.event.setPointValue(event_points);\r\n\r\n\r\n\r\n\r\n        if (this.endTimePicker.getText().trim().isBlank() || this.endTimePicker.getText().trim().isEmpty() || this.startTimePicker.getText().trim().equals(\"Start time (hh:mm)\") || this.endTimePicker.getText().trim().equals(\"End time (hh:mm)\")) {\r\n            // Create a new Time Point object based on the deadline of the user.\r\n\r\n            String deadline_hours = this.pointTimePicker.getText().trim();\r\n\r\n            Pattern pattern = Pattern.compile(\"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\");\r\n            Matcher matcher = pattern.matcher(deadline_hours);\r\n            if (matcher.find()) {\r\n                // match found, valid deadline HH:mm.\r\n                String yyyy_mm_dd = this.pointDatePicker.getValue().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n\r\n                // TODO: Consider the case of  the where the deadline is a past date.\r\n\r\n                String yyyy_mm_dd_HH_mm = yyyy_mm_dd + \" \" + deadline_hours;\r\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                LocalDateTime pointTime = LocalDateTime.parse(yyyy_mm_dd_HH_mm, formatter);\r\n\r\n\r\n                // Create a TimePoint object.\r\n                TimeBehaviour tp = new TimePoint(pointTime);\r\n\r\n                this.event.setTimeBehaviour(tp);\r\n\r\n//                this.calendarView.saveModel();\r\n\r\n                //Success Message!\r\n                this.errorLabel.setText(\"Event Added to the Calendar!\");\r\n                this.calendarView.saveModel();\r\n            } else {\r\n                // Invalid Format of HH:mm\r\n                this.errorLabel.setText(\"Please Re-enter the time of the event. Enter in HH:mm format.\");\r\n                return;\r\n            }\r\n        } else {\r\n            // Create a new Time Range object based on the start-time and end-time of the user.\r\n\r\n            String start_time = this.startTimePicker.getText().trim();\r\n            String end_time = this.endTimePicker.getText().trim();\r\n\r\n\r\n            Pattern pattern = Pattern.compile(\"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n            Matcher matcher = pattern.matcher(start_time);\r\n            Matcher matcher1 = pattern.matcher(end_time);\r\n\r\n            if (matcher1.find() && matcher.find()) {\r\n                // match found, valid deadline HH:mm.\r\n                String yyyy_mm_dd = this.startDatePicker.getValue().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n                String yyyy_mm_dd2 = this.endDatePicker.getValue().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n\r\n                // TODO: Consider the case of  the where the deadline is a past date.\r\n\r\n                String yyyy_mm_dd_HH_mm = yyyy_mm_dd + \" \" + start_time;\r\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                LocalDateTime start_time_block = LocalDateTime.parse(yyyy_mm_dd_HH_mm, formatter);\r\n\r\n                String yyyy_mm_dd_HH_mm2 = yyyy_mm_dd2 + \" \" + end_time;\r\n                DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                LocalDateTime end_time_block = LocalDateTime.parse(yyyy_mm_dd_HH_mm2, formatter2);\r\n\r\n                System.out.println(start_time_block + \" \" + end_time_block);\r\n\r\n\r\n                // Create a TimeRange object.\r\n                TimeBehaviour tr = new TimeRange(start_time_block, end_time_block);\r\n\r\n                this.event.setTimeBehaviour(tr);\r\n//                this.calendarView.saveModel();\r\n\r\n                //Success Message!\r\n                this.errorLabel.setText(\"Event Added to the Calendar!\");\r\n\r\n                this.calendarView.saveModel();\r\n            } else {\r\n                // Invalid Format of HH:mm\r\n                this.errorLabel.setText(\"Invalid Start/End time of the event. Enter in HH:mm format.\");\r\n                return;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches between displaying input for time points/time ranges\r\n     *\r\n     * @param vbox\r\n     */\r\n    private void changeTime(VBox vbox) {\r\n        {\r\n            if (vbox.getChildren().contains(pointDatePicker)) {\r\n                vbox.getChildren().remove(pointDatePicker);\r\n                vbox.getChildren().remove(pointTimePicker);\r\n                vbox.getChildren().remove(saveButton);\r\n                vbox.getChildren().remove(errorLabel);\r\n                pointDatePicker.setValue(LocalDate.now());\r\n                pointTimePicker.setText(\"Time (hh:mm)\");\r\n                changeTimeButton.setText(\"Choose single time\");\r\n                vbox.getChildren().add(startDatePicker);\r\n                vbox.getChildren().add(startTimePicker);\r\n                vbox.getChildren().add(endDatePicker);\r\n                vbox.getChildren().add(endTimePicker);\r\n            } else {\r\n                vbox.getChildren().remove(startDatePicker);\r\n                vbox.getChildren().remove(startTimePicker);\r\n                vbox.getChildren().remove(endDatePicker);\r\n                vbox.getChildren().remove(endTimePicker);\r\n                vbox.getChildren().remove(saveButton);\r\n                vbox.getChildren().remove(errorLabel);\r\n                startDatePicker.setValue(LocalDate.now());\r\n                startTimePicker.setText(\"Start time (hh:mm)\");\r\n                endDatePicker.setValue(LocalDate.now());\r\n                endTimePicker.setText(\"End time (hh:mm)\");\r\n                changeTimeButton.setText(\"Choose start/end time\");\r\n                vbox.getChildren().add(pointDatePicker);\r\n                vbox.getChildren().add(pointTimePicker);\r\n            }\r\n            vbox.getChildren().add(saveButton);\r\n            vbox.getChildren().add(errorLabel);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/EventEditorView.java b/views/EventEditorView.java
--- a/views/EventEditorView.java	(revision e720e387022c58cd8397f2300c98470cc5c02a6b)
+++ b/views/EventEditorView.java	(date 1670290676360)
@@ -1,6 +1,7 @@
 package views;
 
 import event.Event;
+
 import javafx.geometry.Insets;
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
@@ -11,6 +12,7 @@
 import javafx.scene.text.Font;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
+
 import timeBehaviour.TimeBehaviour;
 import timeBehaviour.TimePoint;
 import timeBehaviour.TimeRange;
@@ -18,9 +20,11 @@
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
+
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+
 public class EventEditorView {
 
     private CalendarView calendarView;
@@ -28,7 +32,6 @@
 
     private Label editEventLabel = new Label("");
 
-//    private Button completeButton = new Button("Complete!");
     private TextField nameTextField = new TextField("");
     private TextField pointsTextField = new TextField("");
     private TextField descTextField = new TextField("");
Index: The-Hamburglars.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"javafx\" level=\"application\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/The-Hamburglars.iml b/The-Hamburglars.iml
--- a/The-Hamburglars.iml	(revision e720e387022c58cd8397f2300c98470cc5c02a6b)
+++ b/The-Hamburglars.iml	(date 1670290593033)
@@ -8,5 +8,37 @@
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="javafx" level="application" />
+    <orderEntry type="module-library" scope="TEST">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: event/EventTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/event/EventTest.java b/event/EventTest.java
new file mode 100644
--- /dev/null	(date 1670290593001)
+++ b/event/EventTest.java	(date 1670290593001)
@@ -0,0 +1,16 @@
+package event;
+
+import org.junit.jupiter.api.Test;
+
+
+class EventTest {
+
+    @Test
+    void complete() {
+
+    }
+
+    @Test
+    void addGoal() {
+    }
+}
\ No newline at end of file
